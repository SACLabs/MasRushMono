"""
## The MAS(Multi-agent System) will do:
# @WangXuhongCN
- Step1: receive the packed data from ENV
- Step2: unpack the data
- Step3: It first interpretate the readme.md and understand the requirements of the task (through some LLM tools), turn it into a task list (in todo.txt style)
- Step4: The task list will then be transfer into a graph state, in which each node is a specific agent that has a specific task to do. A entry node is used to send the task list to other agents, and a exit node is used to collect the results from all agent.
- Step5: The relations of nodes in state transition graph created in Step4 will then be optimized by algorithms included in **MAS**
- Step6: The optimized graph will then be run by the MAS, and the results will be collected and sent back to ENV, including:
  - a. task_id
  - b. the generated code
  - c. the generated tests, these tests is generated by MAS to gain more understand of the code it generated
  - d. the generated run.sh
  - e. the changelog of task list
  - f. the graph of state transition
"""

from masr.mas.main import pipeline
from masr.models.interface import Demand
from masr.models.task import TaskHistory
from tests.test_base import task_id, source_code, task_desc, gml, report

from unittest import mock


demand = Demand(content="mock demand")
mock_history = TaskHistory(history=[task_desc])

pipeline_input = {
    "task_id": task_id,
    "content": {"demand": demand, "report": report, "src": source_code},
}

pipeline_output = {
    "task_id": task_id,
    "content": {"result": source_code, "history": mock_history, "graph": gml},
}


# TODO 实现pipeline循环
def test_pipeline():
    mock_pipeline = mock.Mock()
    mock_pipeline.return_value = pipeline_output
    output = mock_pipeline(pipeline_input)
    assert pipeline_output == output
